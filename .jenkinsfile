pipeline {
    agent any
    stages {

        stage('Build') {
            steps {
                sh 'echo "Building..."'
                sh 'mvn clean install'
            }
        }

       /* stage('Package') {
            steps {
                sh 'echo "Packaging..."'
                sh 'mvn package'
            }
        }*/

       /* stage('Unit Tests') {
            steps {
                sh 'echo "Running Unit Tests..."'
                sh 'mvn test'
            }
        }
*/
       /* stage('Mutation Testing') {
            steps {
                sh 'echo "Running Mutation Tests..."'
                sh 'mvn org.pitest:pitest-maven:mutationCoverage'
            }
        }*/

        stage('Integration Tests') {
            steps {
                sh 'echo "Running Integration Tests..."'
                sh 'mvn verify'
            }
        }

        /*stage('SonarQube Analysis') {
            steps {
                withSonarQubeEnv('sonarqube') {
                    sh 'mvn sonar:sonar'
                }
            }
        }*/

        stage('Deployment') {
            steps {
                script {
                    sh '''
                    if [ ! "$(docker ps -q -f name=sql)" ]; then
                        if [ "$(docker ps -aq -f status=exited -f name=sql)" ]; then
                            docker rm sql
                        fi
                        docker run -d --name sql -e 'ACCEPT_EULA=Y' -e 'SA_PASSWORD=YourStrong@Passw0rd' -p 1433:1433 mcr.microsoft.com/azure-sql-edge
                    fi
                    echo "Waiting for SQL Server to be ready..."
                    sleep 20
                    '''

                    sh 'echo "Starting Spring Boot application..."'
                    sh 'java -jar target/*.jar'
                }
            }
        }
    }
}
